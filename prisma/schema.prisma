// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}



model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  purchases     Purchase[]    // 購入履歴へのリレーション
  sessions      Session[]
}

model Purchase {
  id        String   @id @default(cuid())
  userId    String   // 購入したユーザーのID
  bookId    String   // 購入した本のID (MicroCMSのID)
  createdAt DateTime @default(now()) // 購入日時
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Userモデルへのリレーション
}


// model Book {
//   id          String   @id @default(cuid())
//   title       String   // 本のタイトル
//   price       Int      // 本の価格（セント単位）
//   createdAt   DateTime @default(now()) // 作成日
//   authorId    String   // 本を書いたユーザーのID
//   author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade) // Userモデルへのリレーション
//   thumbnailUrl String? // 本のサムネイルのURL（オプショナル）
//   content     String   // 本の本文
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
